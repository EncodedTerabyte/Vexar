{
  "name": "Vexar",
  "scopeName": "source.vexar",
  "fileTypes": ["vx", "vxr", "vexa", "vexar", "vxx", "va"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.vexar",
          "match": "//.*$"
        },
        {
          "name": "comment.block.vexar",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.vexar",
          "match": "\\b(if|else|while|for|ret)\\b"
        },
        {
          "name": "keyword.declaration.vexar",
          "match": "\\b(var|func)\\b"
        },
        {
          "name": "keyword.other.vexar",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.vexar",
          "match": "\\b(int|float|double|bool|char|string|void)\\b"
        },
        {
          "name": "storage.type.vexar",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.vexar",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.vexar",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.vexar",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.vexar",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.vexar",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.vexar",
          "match": "\\b[0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?[fFdD]?\\b"
        },
        {
          "name": "constant.numeric.hex.vexar",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.vexar",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.vexar",
          "match": "\\b0[oO][0-7]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.vexar",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.vexar",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.vexar",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.vexar",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.vexar",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.vexar",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}